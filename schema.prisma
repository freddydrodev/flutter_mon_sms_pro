// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator zod {
//   provider         = "zod-prisma-types"
//   output           = "../utils/zod/prisma"
//   useMultipleFiles = true
// }

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma-client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Version {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  isMajorRelease Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("Versions")
}

enum Country {
  CI
}

type Location {
  lon Float
  lat Float
}

model CompanyType {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companies User[]

  @@map("CompanyTypes")
}

model User {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  emailAddress        String?           @unique /// @encrypted
  emailAddressHash    String?           @unique /// @encryption:hash(emailAddress)?normalize=lowercase
  phoneNumber         String            @unique /// @encrypted
  phoneNumberHash     String?           @unique /// @encryption:hash(phoneNumber)
  password            String?
  fullName            String /// @encrypted
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  isAdmin             Boolean?          @default(false)
  newUser             Boolean?          @default(true)
  xoraiaID            String?
  apiKey              String            @unique /// this will determin if the user is a partenaire or not
  token               String? // this is used by provider and last only 1hr
  tokenExpirationDate DateTime?         @default(now())
  senderIds           SenderId[]
  contacts            Contact[]
  groups              Group[]
  transactions        Transaction[]
  campains            Campain[]
  otps                OTP[]
  templates           Template[]
  // Abonne Plus Info
  companyType         CompanyType?      @relation(fields: [companyTypeId], references: [id])
  companyTypeId       String?           @db.ObjectId
  logo                String?
  description         String?
  address             String?
  city                String?
  country             Country?          @default(CI)
  companiesFollowed   CompanyFollowed[]
  imports             Import[]

  @@map("Users")
}

model Follower {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber       String            @unique /// @encrypted
  phoneNumberHash   String?           @unique /// @encryption:hash(phoneNumber)
  password          String?
  name              String /// @encrypted
  photo             String?
  apiKey            String            @unique /// this will determin if the user is a partenaire or not
  location          Location?
  notificationToken String?
  country           Country?          @default(CI)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  following         CompanyFollowed[]

  @@map("Followers")
}

model CompanyFollowed {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  company    User     @relation(fields: [companyId], references: [id])
  companyId  String   @unique @db.ObjectId
  follower   Follower @relation(fields: [followerId], references: [id])
  followerId String   @unique @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("CompaniesFollowed")
}

enum SENDER_ID_STATUS {
  PENDING
  SUBMITED
  ACCEPTED
  REFUSED
}

model SenderId {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String /// @encrypted
  nameHash    String? /// @encryption:hash(name) <- the name of the source field
  description String /// @encrypted
  status      SENDER_ID_STATUS @default(PENDING)
  archived    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @db.ObjectId
  campains    Campain[]

  @@map("SenderIds")
}

enum Sex {
  M
  F
}

model Contact {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String /// @encrypted
  nameHash        String?          @unique /// @encryption:hash(name) <- the name of the source field
  firstName       String? /// @encrypted
  firstNameHash   String?          @unique /// @encryption:hash(firstName) <- the firstName of the source field
  lastName        String? /// @encrypted
  lastNameHash    String?          @unique /// @encryption:hash(lastName) <- the lastName of the source field
  phone           String           @unique /// @encrypted
  phoneHash       String?          @unique /// @encryption:hash(phone) <- the phone of the source field
  sex             Sex?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.ObjectId
  contactInGroups ContactInGroup[]
  campainContacts CampainContact[]

  @@map("Contacts")
}

model Group {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String /// @encrypted
  nameHash        String?          @unique /// @encryption:hash(name) <- the name of the source field
  description     String? /// @encrypted
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @db.ObjectId
  contactInGroups ContactInGroup[]
  campainGroups   CampainGroup[]

  @@map("Groups")
}

model ContactInGroup {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @db.ObjectId
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String  @db.ObjectId

  @@map("ContactInGroups")
}

type Coords {
  lon    Float
  lat    Float
  radius Int // in meter
}

enum CampainType {
  SMS
  FLASH
  SCHEDULED
  RECURRING
}

model CampainRecurringDay {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  enabled   Boolean   @default(true)
  monday    DateTime?
  tuesday   DateTime?
  wednesday DateTime?
  thursday  DateTime?
  friday    DateTime?
  saturday  DateTime?
  sunday    DateTime?
  campain   Campain   @relation(fields: [campainId], references: [id])
  campainId String    @unique @db.ObjectId

  @@map("CampainRecurringDays")
}

model Campain {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  name            String? /// @encrypted
  text            String /// @encrypted
  type            CampainType          @default(SMS)
  scheduledDate   DateTime?
  recurring       CampainRecurringDay?
  coords          Coords? // to geo located sms
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  contactCount    Int
  contactList     String? ///@encrypted formated as JSON STRINGIFY
  senderId        SenderId?            @relation(fields: [senderIdId], references: [id])
  senderIdId      String?              @db.ObjectId
  transactions    Transaction[]
  user            User                 @relation(fields: [userId], references: [id])
  userId          String               @db.ObjectId
  campainContacts CampainContact[]
  campainGroups   CampainGroup[]

  @@map("Campains")
}

model CampainContact {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  campain   Campain @relation(fields: [campainId], references: [id], onDelete: Cascade)
  campainId String  @db.ObjectId
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String  @db.ObjectId

  @@map("CampainContacts")
}

model CampainGroup {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  campain   Campain @relation(fields: [campainId], references: [id], onDelete: Cascade)
  campainId String  @db.ObjectId
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String  @db.ObjectId

  @@map("CampainGroups")
}

enum MessageStatus {
  PENDING
  SENT
  RECEIVED
  FAILED
}

model Template {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String /// @encrypted
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  @@map("Templates")
}

enum OfferName {
  STARTER // 10 credits 300 FR (30)
  BRONZE // 100 credit 2.500 FR (25)
  FER // 500 credit 10.000 FR (20)
  OR // 1.000 credit 18.000 FR (18)
  DIAMANT // 2.500 credit 40.000 FR (16)
  VIP // 5.000 credit 70.000 FR (14)
}

model Offer {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         OfferName
  price        Int // in CFA
  credit       Int // BASICALY 1 SMS = 1 CREDIT ESPECTED FOR INTERNATIONNAL COUNTRIES
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("Offers")
}

enum TransactionType {
  DEBITED
  RECHARGED
}

enum TransactionStatus {
  PENDING
  FAILED
  CHARGED
}

enum PaymentMethod {
  OM_CI
  MTN_CI
  MOOV_CI
  CASH
  IAP
  BULT_IN
  OTP
}

model Transaction {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  type          TransactionType   @default(DEBITED)
  status        TransactionStatus @default(PENDING)
  paymentMethod PaymentMethod     @default(CASH)
  token         String ///@encrypted the paytoid / or iapid
  credit        Int // BASICALY 1 SMS = 1 CREDIT ESPECTED FOR INTERNATIONNAL COUNTRIES
  price         Int               @default(0)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id])
  userId        String            @db.ObjectId
  campain       Campain?          @relation(fields: [campainId], references: [id])
  campainId     String?           @db.ObjectId // THIS IS IN CASE OF TYPE SMS_SENT
  offer         Offer?            @relation(fields: [offerId], references: [id])
  offerId       String?           @db.ObjectId

  @@map("Transactions")
}

enum OTPStatus {
  PENDING
  VERIFIED
  DEMO
}

enum OTPMode {
  NUMERIC
  ALPHABET
  ALPHA_NUMERIC
}

model OTP {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String ///@encrypted
  phoneNumber String ///@encrypted
  appName     String?   @default("Mon SMS PRO") ///@encrypted
  senderId    String?   @default("MONSMSPRO") ///@encrypted
  status      OTPStatus @default(PENDING)
  mode        OTPMode   @default(NUMERIC)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?   @db.ObjectId

  @@map("OTPs")
}

model Import {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Imports")
}
